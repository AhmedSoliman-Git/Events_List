{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hp\\\\Desktop\\\\12-adv-starting-project\\\\frontend\\\\src\\\\components\\\\Events.js\",\n  _s = $RefreshSig$();\nimport { Suspense } from \"react\";\nimport { defer, json, useRouteLoaderData, Await } from \"react-router-dom\";\nimport EventsList from \"../components/EventsList\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction EventsPage({\n  Newevents,\n  giveId\n}) {\n  _s();\n  const {\n    events\n  } = useRouteLoaderData(\"events-loader-data\");\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Suspense, {\n      fallback: /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          textAlign: \"center\"\n        },\n        children: \"...Loading\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 9,\n        columnNumber: 27\n      }, this),\n      children: /*#__PURE__*/_jsxDEV(Await, {\n        resolve: giveId ? Newevents : events,\n        children: loadedEvents => /*#__PURE__*/_jsxDEV(EventsList, {\n          e: true,\n          vents: loadedEvents\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 11,\n          columnNumber: 30\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 10,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n_s(EventsPage, \"4blG+h6DOno1D17AYcULrTjBvtk=\", false, function () {\n  return [useRouteLoaderData];\n});\n_c = EventsPage;\nexport default EventsPage;\nasync function loadEvents() {\n  const response = await fetch(\"http://localhost:8080/events\");\n  if (!response.ok) {\n    throw json({\n      message: \"Error need to be fixed ðŸ›  !! -- Failed To Fetch\"\n    }, {\n      status: 500\n    });\n  }\n\n  // return response ; //when we using defer we can't return a response ... we make await resonse.json();\n  const resData = await response.json();\n  return resData.events;\n}\nexport async function loader() {\n  return defer({\n    events: loadEvents()\n  });\n}\nvar _c;\n$RefreshReg$(_c, \"EventsPage\");","map":{"version":3,"names":["Suspense","defer","json","useRouteLoaderData","Await","EventsList","jsxDEV","_jsxDEV","Fragment","_Fragment","EventsPage","Newevents","giveId","_s","events","children","fallback","style","textAlign","fileName","_jsxFileName","lineNumber","columnNumber","resolve","loadedEvents","e","vents","_c","loadEvents","response","fetch","ok","message","status","resData","loader","$RefreshReg$"],"sources":["C:/Users/hp/Desktop/12-adv-starting-project/frontend/src/components/Events.js"],"sourcesContent":["import { Suspense } from \"react\";\nimport { defer, json, useRouteLoaderData, Await } from \"react-router-dom\";\nimport EventsList from \"../components/EventsList\";\n\nfunction EventsPage({ Newevents, giveId }) {\n  const { events } = useRouteLoaderData(\"events-loader-data\");\n  return (\n    <>\n      <Suspense fallback={<p style={{ textAlign: \"center\" }}>...Loading</p>}>\n        <Await resolve={giveId ? Newevents : events}>\n          {(loadedEvents) => <EventsList e vents={loadedEvents} />}\n        </Await>\n      </Suspense>\n    </>\n  );\n}\n\nexport default EventsPage;\n\nasync function loadEvents() {\n  const response = await fetch(\"http://localhost:8080/events\");\n\n  if (!response.ok) {\n    throw json(\n      { message: \"Error need to be fixed ðŸ›  !! -- Failed To Fetch\" },\n      {\n        status: 500,\n      }\n    );\n  }\n\n  // return response ; //when we using defer we can't return a response ... we make await resonse.json();\n  const resData = await response.json();\n  return resData.events;\n}\n\nexport async function loader() {\n  return defer({\n    events: loadEvents(),\n  });\n}\n"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,SAASC,KAAK,EAAEC,IAAI,EAAEC,kBAAkB,EAAEC,KAAK,QAAQ,kBAAkB;AACzE,OAAOC,UAAU,MAAM,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAElD,SAASC,UAAUA,CAAC;EAAEC,SAAS;EAAEC;AAAO,CAAC,EAAE;EAAAC,EAAA;EACzC,MAAM;IAAEC;EAAO,CAAC,GAAGX,kBAAkB,CAAC,oBAAoB,CAAC;EAC3D,oBACEI,OAAA,CAAAE,SAAA;IAAAM,QAAA,eACER,OAAA,CAACP,QAAQ;MAACgB,QAAQ,eAAET,OAAA;QAAGU,KAAK,EAAE;UAAEC,SAAS,EAAE;QAAS,CAAE;QAAAH,QAAA,EAAC;MAAU;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAE;MAAAP,QAAA,eACpER,OAAA,CAACH,KAAK;QAACmB,OAAO,EAAEX,MAAM,GAAGD,SAAS,GAAGG,MAAO;QAAAC,QAAA,EACxCS,YAAY,iBAAKjB,OAAA,CAACF,UAAU;UAACoB,CAAC;UAACC,KAAK,EAAEF;QAAa;UAAAL,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACnD;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA;EAAC,gBACX,CAAC;AAEP;AAACT,EAAA,CAXQH,UAAU;EAAA,QACEP,kBAAkB;AAAA;AAAAwB,EAAA,GAD9BjB,UAAU;AAanB,eAAeA,UAAU;AAEzB,eAAekB,UAAUA,CAAA,EAAG;EAC1B,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,CAAC;EAE5D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;IAChB,MAAM7B,IAAI,CACR;MAAE8B,OAAO,EAAE;IAAkD,CAAC,EAC9D;MACEC,MAAM,EAAE;IACV,CACF,CAAC;EACH;;EAEA;EACA,MAAMC,OAAO,GAAG,MAAML,QAAQ,CAAC3B,IAAI,CAAC,CAAC;EACrC,OAAOgC,OAAO,CAACpB,MAAM;AACvB;AAEA,OAAO,eAAeqB,MAAMA,CAAA,EAAG;EAC7B,OAAOlC,KAAK,CAAC;IACXa,MAAM,EAAEc,UAAU,CAAC;EACrB,CAAC,CAAC;AACJ;AAAC,IAAAD,EAAA;AAAAS,YAAA,CAAAT,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}